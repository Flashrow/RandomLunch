// Mocks generated by Mockito 5.2.0 from annotations
// in random_lunch/test/features/random_recipe/domain/usecases/get_random_recipe_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:random_lunch/src/domain/entities/recipe.dart' as _i4;
import 'package:random_lunch/src/domain/repositories/recipes_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [RecipesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipesRepository extends _i1.Mock implements _i2.RecipesRepository {
  MockRecipesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Recipe>> getRandomRecipe(
          {bool? limitLicense, String? tags, int? number}) =>
      (super.noSuchMethod(
              Invocation.method(#getRandomRecipe, [],
                  {#limitLicense: limitLicense, #tags: tags, #number: number}),
              returnValue: Future<List<_i4.Recipe>>.value(<_i4.Recipe>[]))
          as _i3.Future<List<_i4.Recipe>>);
}
